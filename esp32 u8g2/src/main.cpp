#include <Arduino.h>
#include "SPI.h"
#include <U8g2lib.h>
#include <Wire.h>
 
#define SCL 5
#define SDA 4
//定义了一个宏定义，用于延时显示每一次的画图，方便观察OLED的显示过程：
#define SEND_BUFFER_DISPLAY_MS(ms)\
  do {\
    u8g2.sendBuffer(); \
    delay(ms);\
  }while(0);
 
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /*clock=*/SCL, /*data=*/SDA, /*reset=*/U8X8_PIN_NONE);   
 

 
//画像素点-填充屏幕
void testDrawPixelToFillScreen()
{
  int t = 1000;
  u8g2.clearBuffer();
 
  for (int j = 0; j < 64; j++)
  {
    for (int i = 0; i < 128; i++)
    {
      u8g2.drawPixel(i, j);
    }
  }
  SEND_BUFFER_DISPLAY_MS(t);
}
//画直线
void testDrawLine()
{
  int t = 500;
  u8g2.clearBuffer();

 
  u8g2.drawLine(0, 0, 127, 63);
  SEND_BUFFER_DISPLAY_MS(t);
  u8g2.drawLine(0, 0, 127, 0);
  SEND_BUFFER_DISPLAY_MS(t);
  u8g2.drawLine(32, 15, 127, 15);
  SEND_BUFFER_DISPLAY_MS(t);
  u8g2.drawLine(33, 16, 127, 16);
  SEND_BUFFER_DISPLAY_MS(t);
  u8g2.drawLine(127, 0, 127, 15);
  SEND_BUFFER_DISPLAY_MS(t);
  u8g2.drawLine(127, 16, 127, 63);
  SEND_BUFFER_DISPLAY_MS(t);
}
//字符串/文字/变量显示测试
void testDrawStr()
{
  int t = 1000;
  u8g2.clearBuffer();
  u8g2.drawStr(0, 14, "drawStr / print");
  SEND_BUFFER_DISPLAY_MS(t);
 
  u8g2.drawStr(0, 32, "~!@#$%^&*()_+");
  SEND_BUFFER_DISPLAY_MS(t);
 
  u8g2.enableUTF8Print();//enable UTF8
  u8g2.setFont(u8g2_font_wqy12_t_gb2312b);//设置中文字符集
  u8g2.setCursor(0, 48);
  u8g2.print("码农爱学习");
  SEND_BUFFER_DISPLAY_MS(t);
 
  int a = 234;
  for(a=0;a<234;a++)
  {
  u8g2.setCursor(0, 64);
  u8g2.print("int a = ");
  u8g2.setCursor(40, 64);
  u8g2.print(a);//显示变量
  SEND_BUFFER_DISPLAY_MS(t);
  }

}
// width: 128, height: 48
const unsigned char bilibili[] U8X8_PROGMEM = { 0X00,0X01,0X60,0X00,0X30,0X00,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X01,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,
0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X7F,0XF3,0XF0,0X3F,0XFF,0XFF,
0XFF,0XFF,0XF8,0X00,0X00,0X0F,0XFE,0X60,0X3F,0XDF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X00,0X33,0XC0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X01,0XFE,0X00,0X3F,
0X81,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X03,0XFE,0X00,0X1F,0X81,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X07,0XFF,0X00,0X16,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X1C,0X00,0X00,0XC0,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X30,0X00,0X1F,0XE0,
0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X60,0X00,0X1F,0XC0,0X00,0X07,0XFF,0XFF,
0XFF,0XFF,0XFE,0X04,0X60,0X00,0X01,0X00,0X3F,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,
0XE0,0X00,0X03,0X00,0X07,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0XE0,0X00,0X07,0XC0,
0X18,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X30,0X3E,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X2D,0X08,0X80,0X1F,0XF1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,
0X9C,0X00,0X07,0XFF,0XB3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0XF0,0X01,0XDF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0XE1,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XE0,0X04,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XBF,0XBF,0XC0,0X00,0X00,0X01,0X43,
0X5C,0X0C,0XBF,0XFF,0XFE,0XBC,0X3F,0XC0,0X00,0X00,0X00,0X02,0X86,0X0A,0XBF,0XFF,
0XFE,0X9E,0XFF,0X00,0X00,0X00,0X00,0X00,0X04,0X02,0XBD,0XFF,0XFF,0XFF,0XFF,0X00,
0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X03,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF, };
 
void testDrawXBM()
{
  int t = 1000;
  u8g2.clearBuffer();
  u8g2.drawStr(0, 14, "drawXBM");
  u8g2.drawXBM(0, 16, 128, 48, bilibili);
  SEND_BUFFER_DISPLAY_MS(t);
}
void setup()
{
  u8g2.begin();
  u8g2.enableUTF8Print(); // enable UTF8 support for the Arduino print() function
  u8g2.setFont(u8g2_font_wqy12_t_gb2312b);//设置中文字符集
  testDrawXBM();
}
void loop()
{
  
 
}
 
 